# simuconf.tab
#
# Low level settings
#
# Adapted for Simutrans-Experimental by James E. Petts
# June 2009. Released under the Artistic Licence.
#
# This file can be found in many places:
#
# simutrans/config/simuconf.tab (this one)
# ~/simutrans/simuconf.tab (in the user directory, if singleuser_install != 0 or not present, first only pak-file path will be read)
# simutrans/pakfilefolder/config/simuconf.tab
# ~/simutrans/simuconf.tab (readed a second time, s.a.)
#
# Any values set in this file will be over-written by any values set in the simuconf.tab files
# for individual paksets. Any values set here that are not set in the simuconf.tab files for 
# individual paksets will be used. 


################################# Pak settings ##################################
#
# This simuconf.tab will be read first => we set meaningful defaults here.
#
# load/save the files in the users or the program directory directory? (default: 1 = user directory)
# ATTENTION!
# will be only used if this file is located in the program directory at config/simuconf.tab!
#singleuser_install = 1

# Automatic loading of paksets. If a path to a pakset is specified below, that pakset
# will be loaded by default when the game starts. If no pakset is specified, the user
# will be presented with a menu of all available paksets.
# ATTENTION:
# This will be only used if this file is located in the program directory at config/simuconf.tab
# and will be overwritten by the settings from simutrans/simuconf.tab in the user directory
#
#pak_file_path = pak128.Britain-Ex/
#pak_file_path = pak192.comic.experimental/
#pak_file_path = pak/
#pak_file_path = pak.german/
#pak_file_path = pak128/
#pak_file_path = pak.japan/
#pak_file_path = pak.winter/
#pak_file_path = pak.ttd/


############################# Program/system settings ###############################

# compress savegames?
# "binary" means uncompressed, "zipped" means compressed
saveformat = zipped

# autosave every x months (0=off)
autosave = 12

# How much faster should the game proceed with fast forward
# (limited by your computer and the size of the map)
fast_forward = 100

# maximum number of position tested during a way search
# 100000 should be ok even for large maps with ships
# 10000 is ok for everything else (consumes 16*x Bytes main  memory)
max_route_steps = 1000000

# Max number of steps in goods pathfinding
# This should be equal or greater than the biggest group
# of interconnected stations in your game.
#
# If you set it too low, some goods might not find a route
# if the route is too complex. If you set it too high, the
# search will take a lot of CPU power, particularly if searches
# often fail because there is no route.
#
# Depending on your CPU power, you might want to limit the search
# depth.
#
# 300 seems to be a good compromise for most games. 100 is ok for
# small games. 8000 should suffice for even the largest maps, but
# will take a good amount of CPU time if you have complex transport
# networks. Max. allowed value is 9994.
#
# prissi: On a 512x512 map with more than 150000 people daily, the saturation
# value for "no route" was higher, around 8000. Using 300 instead almost doubled
# the value of "no route"
#
max_hops = 1500

# Passengers and goods will change vehicles at most "max_transfer"
# times to reach their destination.
#
# It seems that in good networks, the number of transfers is below
# 5. I think 6 is a good compromise that allows complex networks but
# cuts off the more extreme cases
#
# You can set this lower to save a little bit of CPU time, but at some
# point this measn you'll get less passengers to transport
#
# T. Kubes: I would say 8 for now, but this definitely should be difficulty
# dependent setting.
#
# Note: in Simutrans-Experimental, the number of max_transfers is no longer
# a hard limit on transfers, but affects routing depth. Use lower settings if
# performance is too slow; use higher settings if passengers or goods are not
# finding routes where they ought to be.
#
max_transfers = 8

# This setting determines whether Simutrans calculates and refreshes paths 
# using a distributed or centralised approach. The distributed approach 
# refreshes only the paths directly (but not indirectly) affected by any 
# changes instantly, and waits until the end of the next path refresh period
# (usually two months: see max_rerouting_interval) before refreshing.
# The centralised approach starts to refresh all paths of any affected goods 
# category immediately upon change, but does so only gradually to avoid making 
# the game unresponsive; it also refreshes all paths at the start of each month.
#
# NOTE: Initial tests suggest that the centralised approach is faster than the
# distributed approach. 
#
# 0 = distributed approach (default); 
# 1 = centralised approach
#
path_searching_approach = 1

# This setting is Windows specific. It determines whether multimedia timer
# functions or performance counter functions are used for returning system
# time in the program. Using multimedia timer functions causes the thread
# scheduler to switch tasks more frequently, reducing overall system
# performance. Using performance counter functions will not cause this
# problem, but the performance counter is not supported by all CPUs and it
# may not work normally on all windows platforms. If the performance counter is 
# not supported, setting this option to 1 will have no effect.
#
# Some systems have problems with the performance counter, even though they
# support it, which is why the option is given to disable it. It is recommended
# that the performance counter is enabled unless there are problems, in which
# case, it can be disabled to test whether that improves matters. Windows 2000
# is known to have problems with the performance counter, as is some hardware.
#
# NOTE: Never include this option in pakset simuconf.tab
#
# 0 = multimedia timer functions (default)
# 1 = performance counter functions
#
system_time_functions = 1

# way builder internal weights (defaults)
# a higher weight make it more unlikely
# make the curves negative, and the waybuilder will built strange tracks ...
way_straight=1
way_curve=2
way_double_curve=6
way_90_curve=15
way_slope=10
way_tunnel=8
way_max_bridge_len=15
way_leave_road=25


################################# Display settings ################################

# display (screen/window) width
# also see readme.txt, -screensize option
display_width  = 704

# display (screen/window) height
# also see readme.txt, -screensize option
display_height = 560

# show full screen
fullscreen = 0

# How many frames per second to use? Display may look pretty until 10 or so
# (depends very much on computer, game complexity and graphics driver)
frames_per_second = 30

# show the windows close etc. buttons on the right (like windows 98)
window_buttons_right = 0

# draw a frame with titlebar color around active window
window_frame_active = 0

# Do you want to have random pedestrians in town? Look nice but needs some
# CPU time to process them. (1=on, 0=off)
# Impact on frame time: ~10% (16 cities on a new standard map)
random_pedestrians = 1

# there are some other grounds (like rocky, lakes etc. )
# which could be added to the map (default 10)
# show random objects to break uniformity (every n suited tiles)
random_grounds_probability = 10

# show random moving animals (n = every n suited tiles, default 1000)
random_wildlife_probability = 1000

# animate the water each interval (if images available)
# costs some time for the additional redraw (~1-3%)
water_animation_ms = 250

# Show info windows for private cars and pedestrians?
# (1=on, 0=off)
pedes_and_car_info = 0

# After how many month a citycar breaks (and will be forever gone) ...
# default is ten years
default_citycar_life = 250

# (=1) drive on the left side of the road
drive_left = 0

# Show infos on trees?
# (1=on, 0=off)
tree_info = 1

# Show infos also on bare ground?
# (1=on, 0=off)
ground_info = 0

# Show passenger level of townhalls?
# (1=on, 0=off)
townhall_info = 0

# always open only a single info window for the ground,
# even if there are more objects on this tile
only_single_info = 1

# Should stations get numbered names? (1=yes, 0=no)
numbered_stations = 0

# Show name signs and statistic?
# 0 = don't show anything
# 1 = station names
# 2 = statistics
# 3 = names and statistics
show_names = 3


#################################### Gameplay settings ##################################

# Size of the station catchment area (default: 2)
# older game size was 3
# savegames with another catchment area will be unloadable
station_coverage = 2

# passenger generation (default is 16 for Simutrans-Standard, and 10 for 
# Simutrans-Experimental). The higher the value, the more passengers generated.
passenger_factor = 10

# Use beginner mode for new maps
first_beginner = 0

# The city weight factor determines how fast that cities grow. The larger the number,
# the *slower* that cities will grow. The default is 100. Set the number at zero to 
# disable city growth entirely. 
city_weight_factor = 100

# The program will generate three groups of passengers: (1) local;
# (2) midrange; and (3) long distance. The program will look for a town within
# the specified distance ranges for each class of passenger. If it cannot
# find such a town within a certain number of tries, it will pick a random town.
# The ranges *may* overlap - indeed, this is encouraged.

local_passengers_min_distance = 0
local_passengers_max_distance = 64
midrange_passengers_min_distance = 0
midrange_passengers_max_distance = 128
longdistance_passengers_min_distance = 0
longdistance_passengers_max_distance = 16384

# The following are percentage chances. They represent the chances that
# any passengers generated will try to find a town within each of the three
# ranges, respectively. 

passenger_routing_local_chance = 33
passenger_routing_midrange_chance = 33
# passenger_routing_longdistance_chance is 100 minus the sum of the two above values,
# but not stipulated individually.

# Some passengers who are not able to find a route will be content
# to go to an alternative destination. Set the maximum number here.
# (Note: whether any given passenger is content to go to an alternative
# destination, and, if so, the number, will be random. For each 
# possible number of alternative destinations, the chances will be even.
# For example, if the number is set at 2, there will be an equal chance
# of passengers having 0, 1 or 2 alternative destinations).

max_alternative_destinations = 3

# Passengers have a maximum tolerance level for how long that they will
# spend travelling. The further that the passengers want to go, the more
# time that they will be prepared to spend travelling. The number is 
# expressed in minutes. For each packet of passengers, the number of 
# minutes travelling time (including waiting time) that they are prepared
# to tolerate is randomised between the minimum and maximum amount. The
# local, mid-range and long-distance passenger groups correspond to those
# above. 

min_local_tolerance = 45
max_local_tolerance = 60
min_midrange_tolerance = 60
max_midrange_tolerance = 180
min_longdistance_tolerance = 180
max_longdistance_tolerance = 720

# This is the number of passengers routed at once,
# to save CPU resources. Decreasing this number will
# make the game run more slowly. Default = 7.

passenger_routing_packet_size = 7

# These settings relate to private car use. See /config/privatecar.tab for
# the configuration of private car ownership for different years.
#
# "Base car preference percent" is the chance, expressed in percentage, that, all
# other things being equal, a passenger with a private car will choose to use that
# car in preference to using public (i.e., the player's) transport. Higher values
# are more realistic; lower values make the game easier. 
# 
# "Always prefer car percent" is the percentage of drivers who prefer to use their
# car no matter how congested the roads. The remaining percentage of drivers are 
# deterred from using their car to go to or from (or within) towns that have a
# high level of congestion. The default is 10. 
#
# "Congestion density factor" is the factor by which the population density (in
# citizens per tile) is divided to get a factor multiplied by the number of cars
# per tile per month to get the congestion figure. In simple terms, the lower this
# number, the easier that it will be for cities to register as congested, and 
# the more likely that it is that passengers will opt for public (i.e., the player's)
# transport instead. If "congestion density factor" is set to zero, then the congestion
# will be calculated using a much simpler formula that does not depend on the city's
# population density at all.  
#
# To revert to the behaviour of Simutrans Standard (with no competition from private cars 
# at all), simply set "base_car_preference_percent" to 0. Passengers will then only choose
# private cars if no public transport is available.

base_car_preference_percent = 95
always_prefer_car_percent = 10
congestion_density_factor = 16

# This setting gives the maximum time that passengers are prepared to wait for their
# transport. The setting is divided by speed bonus value to get the number of minutes.
# In pak128.Britain and pak128, the default speed bonus value for passengers is 18. So,
# at the default wait time of 2,700, the maximum time that passengers are prepared to
# wait is 2,700 / 18 = 150 minutes, or two and a half hours. 
#
# The same applies for other sorts of goods: for example, the speed bonus value for
# mail is 15. So, with a passenger_max_weight of 2700, mail would wait for 180 
# minutes before being discarded.

passenger_max_wait = 2700

# This is the maximum interval between which routes already calculated will be declared
# stale, and require recalculation next time that they are called. The connexions from
# the stations are staggered so that, at the default value of 2, the station connexions
# will recalculate every one month, and the routes every other two months. The lower the
# number, the more up to date that routes will be, but the slower that the game will be.
# It is recommended to set this at either 2 or 4.

max_rerouting_interval_months = 2

# If "avoid_overcrowding" is enabled (avoid_overcrowding = 1), then passengers or goods
# unloading at an overcrowded stop that is not their destination (i.e., a transfer stop)
# will be discarded, and will not pay for their journey so far. Passengers will be added
# to the "unhappy passengers" graph, which will have an effect on revenue.

avoid_overcrowding = 0

# Note: Simutrans-Standard also has a "no_routing_over_overcrowding" setting, but this
# is not available in Simutrans-Experimental due to the differences in the way in which
# goods and passengers are routed. 

# with this switch on (default), overcrowded factories will not recieve goods any more
just_in_time = 1

# If this setting is set to 1, halts will have different capacities for each type of goods.
seperate_halt_capacities=1


################################### Time settings ###################################

# Enforce vehicle introduction dates?
# 0 = all vehicles available from start of the game
# 1 = use introduction dates
# 2 = (default) use settings during game creation
#
use_timeline = 2

# Starting year of the game:
# Setting it below 1850 is not recommended for 64 set!
# You will have problems with missing vehicles, do not complain if you do so!
# Setting it above 2050 will render game bit boring - no new vehicles.
#
# other recommended vaule for 64 is 1956
#
starting_year = 1930

# Starting month of the game for people who want to start in summer (default 1=January)
starting_month = 1

# Should month be shown in date? (0=no, 1=yes, 2>=show day in japan format=2, us format=3, german=4)
# This is most useful, if you use longer months than the default length (see below)
#
show_month = 4

# Global time multiplier (will be save with new games)
# 2^bits_per_month = duration of a game month in microseconds real time
# default is 18. For example, 21 will make the month 2^3=8 times longer in real time
# production and maintainance cost will be adjusted accordingly.
#
bits_per_month = 19

################################## Finance settings #################################

# These values are usually set in the pak files
# You can adjust all the cost in the game, that are not inside some pak file

# In beginner mode, all revenues are multiplied by a factor (default 1500=1.5)
beginner_price_factor = 1500

# Starting money of the player. Given in Credit cents (1/100 Cr)
#starting_money = 30000000

# Maintenance costs of buildings
#maintenance_building = 2000

# first stops: the actual cost is (cost*level*width*height)
#cost_multiply_dock=500
#cost_multiply_station=600
#cost_multiply_roadstop=400
#cost_multiply_airterminal=3000
#cost_multiply_post=300
#cost_multiply_headquarter=1000

# cost for depots
#cost_depot_rail=1000
#cost_depot_road=1300
#cost_depot_ship=2500

# other way related stuff
#cost_signal=500
#cost_tunnel=10000
#cost_third_rail=80

# other construction/destruction stuff
#cost_alter_land=1000
#cost_buy_land=100
#cost_set_slope=2500
#cost_found_city=5000000
#cost_multiply_found_industry=20000
#cost_remove_tree=100
#cost_multiply_remove_haus=1000
#cost_multiply_remove_field=5000

# Settings for calibrating the revenue system
#
# These settings calibrate the way in which revenue is calculated in the game. Changing
# them might make the game easier or harder, or, if they are changed in odd ways, make it
# behave eratically. Make sure to know what you are doing before changing these values.

# These settings calibrate the speed bonus. Note that, with Simutrans-Experimental, unlike
# Simutrans-Standard, the speed bonus is based on the convoy or line's *average* speed, not
# the convoy's maximum speed. All distances in these settings are measured in tiles.
#
# min_bonus_max_distance is the distance below which the speed bonus (or penalty) does not
# apply. Below this distance, goods pay the same no matter what the average speed.
#
# median_bonus_distance is the distance at which 100% of the speed bonus/penalty applies. 
# At anything between min_bonus_max_distance and median_bonus_distance, a scaled proportion
# of the speed bonus applies. For example, if the min_bonus_max_distance was 10, and the 
# median_bonus_distance was 110, then, for a journey of 50 tiles, 50% of the speed bonus or
# penalty would apply. median_bonus_distance is optional: if it is not specified, or set to
# 0, it will be calculated as the mid point between min_bonus_max_distance and
# max_bonus_min_distance.
#
# max_bonus_min_distance is the distance above which the rate of the speed bonus increases
# no further. In other words, the rate of the speed bonus (or penalty) keeps increasing with
# the distance, until it reaches the max_bonus_min_distance, after which it remains steady.
#
# max_bonus_multiplier_percent is the percentage of the speed bonus that applies at or above
# the distance specified in max_bonus_min_distance. So, if the speed bonus rating was 10%, the
# distance exceeded the max_bonus_min_distance value, and the max_bonus_multiplier_percent was
# set to 200, the speed bonus rating would effectively be 20% for that journey.
# Between the median_bonus_distance and the max_bonus_min_distance, a scaled proportion applies.
# So, if, for example, the median_bonus_distance was 100, the max_bonus_min_distance was 1,100
# the actual distance 500, and the max_bonus_multiplier_percent 200, the speed bonus rating
# would be increased by half of the multiplier, or 150%.

min_bonus_max_distance = 16
median_bonus_distance = 128
max_bonus_min_distance = 1024
max_bonus_multiplier_percent = 300

# For comfort, and the revenues from catering and travelling post offices, the game needs to
# know the length of a journey. This is done by dividing the number of tiles by the average speed
# in kilometers per hour of the line or convoy, one tile representing one kilometer. However, this
# can produce very long journey times: travelling by 'bus at an average of 45kph or so accross a
# village can produce a journey time of 15-20 minutes, for example. This would make less comfortable, 
# but higher capacity vehicles for local transport pointless in most cases. 
#
# To counteract this, the journey_time_multiplier_precent is used. This enables the journey times to
# be reduced uniformly to match the approximate scale of the map as played. The default is 30, which
# reduces journey times to a third (which is somewhat more realistic in comparison to the size of
# and space between towns on a typical Simutrans map). 

journey_time_multiplier_percent = 30

# These next settings affect the interaction between comfort and revenue in Simutrans. Comfort only
# affects passenger traffic, for obvious reasons. Passengers have a certain level of comfort that
# they will tolerate for certain distances. All comfort ratings are in the range of between 0 and
# 255. At the tolerable level, the revnue is unaffected. At above the tolerable level, a luxury
# bonus is applied. At below the tolerable level, a discomfort penalty is applied. The values can
# be set to anything, but, to reflect real life, it is suggested that the discomfort penalty is
# significantly higher than the luxury bonus. 
#
# tolerable_comfort_short is the tolerable comfort rating of a vehicle (0 - 255) for a journey of no
# more than tolerable_comfort_short_minutes.
#
# tolerable_comfort_median_short is the tolerable comfort rating of a vehicle for a journey of no more
# than tolerable_comfort_median_short minutes.
#
# tolerable_comfort_median_median is the tolerable comfort rating of a vehicle for a journey of no more
# than tolerable_comfort_median_median minutes.
#
# tolerable_comfort_median_long is the tolerable comfort rating of a vehicle for a journey of no more
# than tolerable_comfort_median_long minutes.
#
# tolerable_comfort_long is the tolerable comfort rating of a vehicle for a journey of at least
# tolerable_comfort_long minutes.
#
# For any journeys of a time between any of the values, a scaled proportion is taken. 

tolerable_comfort_short_minutes=2
tolerable_comfort_short=15

tolerable_comfort_median_short_minutes=30
tolerable_comfort_median_short=60

#Two hours
tolerable_comfort_median_median_minutes=120
tolerable_comfort_median_median=100

#Five hours
tolerable_comfort_median_long_minutes=300
tolerable_comfort_median_long=160

#12 hours
tolerable_comfort_long_minutes=720
tolerable_comfort_long=220

# max_luxury_bonus_differential is the maximum number of comfort rating points above the tolerable level
# that affects the luxury bonus. Anything beyond that, and further added luxury makes no difference to the
# revenue.
#
# max_luxury_bonus_percent is the percentage increase in revenue from the maximum level of luxury specified in
# max_luxury_bonus_differential. So, if the tolerable comfort level for any given distance was 100, the 
# max_luxury_bonus_differential 50, and the max_luxury_bonus_percent 50, then the revenue would increase up to
# 50% beyond the normal revenue for additional comfort up to 150, but would not increase further with any increase
# in comfort beyond 150. 

max_luxury_bonus_differential=55
max_luxury_bonus_percent=40

# The discomfort penalty works in exactly the same way as the comfort bonus. max_discomfort_penalty_percent is the
# percentage decrease in revenue from the maximum level of discomfort specified in max_discomfort_penalty_differential. 

max_discomfort_penalty_differential=200
max_discomfort_penalty_percent=95

# These settings control the revenue that can be earned from catering and travelling post offices. Note that catering
# vehicles on a convoy also increase the comfort by a small amount, which has an indirect effect on the revenue. These
# settings do not affect that: these settings affect the revenue earned from the catering itself: i.e., by selling food
# and drink. 
#
# catering_min_minutes is the shortest journey time that will provide any catering revenue. Anything below that, and 
# passengers will not bother to buy any food or drink at all. 
#
# catering_level1_minutes is the journey time at which any convoy with a catering level of 1 or higher will earn, per
# passenger, the number of Simu-cents (1/100th of a Simucredit) specified in catering_level1_max_revenue. 
# 
# The same applies for each subsequent catering level: in other words, higher catering levels only earn more than lower
# catering levels on journeys of at least the catering_levelX_minutes (where X is the catering level in question).
#
# Between each level, the a scaled proportion is applied. So, for example, if catering_min_minutes is 100, 
# catering_level1_minutes is 200, and the actual journey time is 150 minutes, then, any convoy with a catering level 
# of at least 1 will earn 50% of the amount specified in catering_level1_max_revenue per passenger. 

catering_min_minutes=60
catering_level1_minutes=90
catering_level1_max_revenue=150
catering_level2_minutes=120
catering_level2_max_revenue=250
catering_level3_minutes=150
catering_level3_max_revenue=350
catering_level4_minutes=240
catering_level4_max_revenue=400
catering_level5_minutes=300
catering_level5_max_revenue=475

# Travelling post office revenue is simpler than catering revenue. For every journey that mail makes in a convoy containing
# a travelling post office vehicle (that is, a mail carrying vehicle with a catering level above zero) where the journey time
# exceeds that specified in tpo_min_minutes, the trip will earn the amount specified in tpo_revenue, multiplied by the number
# of mail bags carried, in addition to the ordinary revenue.

tpo_min_minutes=120
tpo_revenue=300

# Insolvency and debt settings
#
# These settings allow what happens when the player runs out of money and goes
# into the red to be customised. 
#
# "interest_rate_percent" is the annual interest rate (charged monthly) on all
# overdraft debt (i.e., on all negative account balances). It can be between 0
# and 255. 
# 
# "allow_bankruptsy" determines whether, when the player is deemed to have been
# insolvent for more than a certain period, the player should be declared
# bankrupt and the game over. 0 = no, 1 = yes.
# 
# "allow_purchases_when_insolvent" determines whether, if the player's bank
# balance falls below the player's credit limit (shown in the finance window),
# the player will be unable to spend any new money on capital items (excluding
# bulldozing) until the player has come back within the credit limit again.
# 0 = no, 1 = yes.
#
# To revert to the behaviour of Simutrans standard, set interest_rate_percent to
# 0, set allow_bankruptsy to 1, and set allow_purchases_when_insolvent to 1.

interest_rate_percent = 10
allow_bankruptsy = 0
allow_purhcases_when_insolvent = 0	

# This is a compatibility setting for Simutrans-Standard. Because, in
# Simutrans-Standard, the speed bonus data (in speedbonus.tab) is based on the
# *maximum*, rather than the *average* speed of the vehicles, the speeds in
# speedbonus.tab will be too high. Use this setting to reduce them if playing 
# with an incompatible pakset. For paksets produced with Simutrans-Standard in
# mind, the setting should be somewhere between 60-70. For compatible paksets,
# the setting should be 100. 

speed_bonus_multiplier_percent = 70

# Settings for obsolete vehicles
#
# Obsolete vehicles cost more to maintain, depending on these settings. The increase
# percent is the extra amount that it costs to maintain a vehicle after its retire
# date. For example, if a vehicle cost 0.10c to maintain when not obsolete, and
# obsolete_running_cost_increase_percent was set to 200, it would cost 0.20c to
# maintain after its retire date.
#
# The phase years stipulate how long it should be after the retirement date before the
# full percentage increase comes into effect. Between the retirement date and that number
# of years after the retirement date, a proportion of the increase percentage applies.
# For example, if the obsolete_running_cost_increase_phase_years was set to 10 in the 
# above example, then, 5 years after the retirement date for the vehicle, the running 
# costs would be 0.15c, and ten or more years after the retirement date, they would be
# 0.20c. 
#
# To revert to previous behaviour (as of Simutrans stable 100 and earlier), in which
# there was no increase in the running costs for obsolete vehicles, set the increase
# percent to 100 and the phase years to 1. 

obsolete_running_cost_increase_percent = 800
obsolete_running_cost_increase_phase_years = 40


################################ Vehicle settings ##############################

# These settings determine how vehicles take corners, for each individual type of way.  They
# only apply to vehicles that use fixed ways (road, rail, monorail, etc.), and not aircraft or
# ships.
#
# Corner adjustment facotor (min/max) (%): The percentage of the normal speed limit applied
# on a 45 degree bend (for example, if the speed limit was 200kph, and the adjustment
# factor set to 50, the speed limit on the corner would be 100kph). 
# 
# Corner limit (min/max) (kph): The minimum and maximum speed limits for phasing of the 
# corner adjustment factor. On a way with the speed limit at or below the minimum limit,
# the minimum adjustment factor applies. On a way with the limit at or above the maximum
# speed limit, the maximum adjustment factor applies. Between the two, a phased proportion
# of the adjustment factor applies as a linear function of the difference between the two.
# For example, at halfway between the minimum and maximum speeds, halfway between the
# minimum and maximum adjustment factors apply.
#
# Direction steps (min/max) (number of tiles): The number of steps that the simulation takes
# into account when determining how sharp that a corner is. For example, if the number is set
# to 6, the corner speed limit will be based on the greatest difference in angle between the
# current direction and the direction in which the vehicle was travelling over the last 6 tiles.
# The higher the number, therefore, the more important that it is to have straight ways.
# Higher numbers should be set for railways and track based ways, and lower numbers for roadways.
# The direction steps are phased in the same way as the adjustment factor.
#
# Curve friction factor (x): The number of times extra friction that applies as a vehicle corners.
# Since the friction occasioned by cornering is not usually a significant speed limiting factor for
# most transport vehicles, it is recommended to set this to 0. It is preserved for those who prefer
# the Simutrans-Standard system of cornering.
#
# Reverting to the older cornering system: To make Simutrans behave in the conventional way (by
# using friction rather than speed limits to reduce speed in corners), set the minimum and
# maximum adjustment factors, and the minimum and maximum direction steps, to 1, and the friction
# factor to 8. With those settings, the minimum and maximum speed will be irrelevant. 

max_corner_limit_road=200
min_corner_limit_road=30
max_corner_adjustment_factor_road=80
min_corner_adjustment_factor_road=90
min_direction_steps_road=2
max_direction_steps_road=2
curve_friction_factor_road=0

max_corner_limit_track=425
min_corner_limit_track=45
max_corner_adjustment_factor_track=50
min_corner_adjustment_factor_track=85
min_direction_steps_track=4
max_direction_steps_track=14
curve_friction_factor_track=0

max_corner_limit_tram=250
min_corner_limit_tram=30
max_corner_adjustment_factor_tram=70
min_corner_adjustment_factor_tram=87
min_direction_steps_tram=3
max_direction_steps_tram=8
curve_friction_factor_tram=0

max_corner_limit_monorail=425
min_corner_limit_monorail=75
max_corner_adjustment_factor_monorail=50
min_corner_adjustment_factor_monorail=85
min_direction_steps_monorail=5
max_direction_steps_monorail=16
curve_friction_factor_monorail=0

max_corner_limit_maglev=500
min_corner_limit_maglev=50
max_corner_adjustment_factor_maglev=40
min_corner_adjustment_factor_maglev=80
min_direction_steps_maglev=4
max_direction_steps_maglev=16
curve_friction_factor_maglev=0

max_corner_limit_narrowgauge=250
min_corner_limit_narrowgauge=30
max_corner_adjustment_factor_narrowgauge=66
min_corner_adjustment_factor_narrowgauge=92
min_direction_steps_narrowgauge=3
max_direction_steps_narrowgauge=8
curve_friction_factor_narrowgauge=0

# These settings determine how long that it takes a train-type convoy to turn
# around when it reaches the end of the line. They do not apply to road vehicles
# or aircraft.
#
# "unit_reverse_time" refers to trains/convoys, such as multiple units, that have
# a cab at each and, and can be driven in reverse without any re-arrangement of 
# the order of the vehicles. These will generally take the least time to reverse.
#
# "hauled_reverse_time" refers to trains/convoys that cannot be driven from the
# rear, so the locomotive at the front has to run around the train and attach
# to the rear, but where that locomotive can itself be driven in either direction,
# so that it does not need to turn around.
#
# "turntable_reverse_time" refers to trains/convoys that, as for the above category,
# cannot be driven from the rear, but that also require their locomotive to be turned
# around to face the other direction (such as steam locomotives with tenders) at the
# end of the journey. These will genearlly take the most time to reverse.
#
# All times are in milliseconds (1000 = 1 sec), assuming that the game is set to the 
# normal speed (i.e., not fast-forwarded).

unit_reverse_time=1500
hauled_reverse_time=2500
turntable_reverse_time=4000

# This setting allows the power of all vehicles to be adjusted at once. It is a
# percentage figure. Thus, if, for example, a vehicle has a power rating of 1,200kw
# and the global_power_factor_percent is set to 200, it will behave in game as if
# it had a power rating of 2,400kw. This setting is applied *in addition to* the
# "gear" setting, such that, if a vehicle had a power rating of 1,200kw, a gear of
# 2.0 and the global_power_factor_percent was set to 200, the vehicle would behave
# as if it had a total power of 4,800kw. 
#
# The default is 100.

global_power_factor_percent=100

# This setting allows the way in which weight limits are enforced to be customised.
# If enforce_weight_limits is set to 0, weight limits are ignored entirely. If
# enforce_weight_limits is set to 1, then vehicles can travel over roads, rails,
# tunnels and bridges for which they are too heavy, but only at greatly reduced
# speed. If enforce_weight_limits is set to 2, then vehicles cannot travel over
# ways for which they are overweight at all. 
#
# To revert to the behaviour of Simutrans-Standard, set enforce_weight_limits=0

enforce_weight_limits=1


################################## Industry settings #################################
# also pak dependent

# allow all possible supplier to connect to your factories?
# This will also affect savegames!
# best to leave it in default position (0). (only on for simuTTD)
crossconnect_factories = 0

# how big is the chance for crossconnections in percent
# (100% will give nearly the same results as crossconnect_factories=1)
crossconnect_factories_percentage = 33

# How much is the total electric power available (in relation to total production) 
# in parts per thousand. 1000 = 100% and default for Simutrans-Experimental.
electric_promille = 1000

# with this switch on (default), overcrowded factories will not recieve goods any more
just_in_time = 1

# Minimum distance between factories
factory_spacing = 6

# Some factories have a retirement date, after which they are obsolete. After
# that date, factories may close down (random chance each month). After the number
# of years stipulated below, factories have a 100% chance of closing down. The
# chance increases the closer to this value that factories get.
max_years_obsolete = 30
